# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: devopsbootcamp

app: todo-app
service: todo-service

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'Admin'}
  vpc:
    securityGroupIds:
      - Ref: LambdaSecurityGroup
    subnetIds:
      - ${param:PrivateSubnet1}
      - ${param:PrivateSubnet2}
  environment:
    TODO_TABLE: ${self:custom.todoTableName}
    QUEUE_URL: ${self:custom.todoQueueUrl}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
            - s3:CreateBucket
        
          Resource: "*"

custom:
  privateSubnet1: ${param:PrivateSubnet1}
  privateSubnet2: ${param:PrivateSubnet2}
  todoTableName: todo-items-${self:provider.stage}
  todoQueueUrl: ${opt:queue-url, 'https://sqs.eu-west-1.amazonaws.com/123456789012/todo-queue-dev'}

resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Lambda SG for ${self:provider.stage}
        VpcId: ${param:VpcId}
        SecurityGroupEgress: []
        SecurityGroupIngress: []

    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todoTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    TodoQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: todo-queue-${self:provider.stage}

  Outputs:
    TodoTableName:
      Value: !Ref TodoTable
      Export:
        Name: ${self:provider.stage}-TodoTableName
    TodoQueueUrl:
      Value: !Ref TodoQueue
      Export:
        Name: ${self:provider.stage}-TodoQueueUrl

functions:
  CreateTodo:
    handler: handlers/createTodo.handler
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - ${self:custom.privateSubnet1}
        - ${self:custom.privateSubnet2}
    environment:
      TODO_TABLE: ${self:custom.todoTableName}
      QUEUE_URL: ${self:custom.todoQueueUrl}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TodoQueue, Arn]

  processTodo:
    handler: handlers/processTodo.handler
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - ${self:custom.privateSubnet1}
        - ${self:custom.privateSubnet2}
    environment:
      TODO_TABLE: ${self:custom.todoTableName}
      QUEUE_URL: ${self:custom.todoQueueUrl}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TodoQueue, Arn]

  imageProcessor:
    handler: helpers/imageProcessor.handler
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - ${self:custom.privateSubnet1}
        - ${self:custom.privateSubnet2}
    environment:
      TODO_TABLE: ${self:custom.todoTableName}

  dlqReDrive:
    handler: helpers/dlqReDrive.handler
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - ${self:custom.privateSubnet1}
        - ${self:custom.privateSubnet2}
    environment:
      QUEUE_URL: ${self:custom.todoQueueUrl}

plugins:
  - serverless-deployment-bucket

params:
  dev:
    VpcId: vpc-xxxxxx
    PrivateSubnet1: subnet-xxxxxx1
    PrivateSubnet2: subnet-xxxxxx2
  stage:
    VpcId: vpc-yyyyyy
    PrivateSubnet1: subnet-yyyyyy1
    PrivateSubnet2: subnet-yyyyyy2
  prod:
    VpcId: vpc-zzzzzz
    PrivateSubnet1: subnet-zzzzzz1
    PrivateSubnet2: subnet-zzzzzz2